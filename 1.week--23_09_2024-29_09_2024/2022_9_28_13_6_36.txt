MATLAB OTURUMU BAŞARILI BİR ŞEKİLDE AÇILDI...
A=[1 2 3;2 3 4;4 2 5]

A =

     1     2     3
     2     3     4
     4     2     5

B=[4 5 1]'

B =

     4
     5
     1

inv(A)*B

ans =

   -1.4000
    1.8000
    0.6000

%A*X=B
det(A)

ans =

    -5

A\B

ans =

   -1.4000
    1.8000
    0.6000

X=inv(A)*B

X =

   -1.4000
    1.8000
    0.6000

syms x1, x2, x3
{Unrecognized function or variable 'x2'.
} 
syms x1 x2 x3
solve(x1+2*x2+3*x3=4,2*x1+3*x2+4*x3=5,4*x1+2*x2+5*x3=1)
 solve(x1+2*x2+3*x3=4,2*x1+3*x2+4*x3=5,4*x1+2*x2+5*x3=1)
                   ↑
{Error: Incorrect use of '=' operator. To assign a value to a variable, use '='. To compare
values for equality, use '=='.
} 
solve('x1+2*x2+3*x3=4', '2*x1+3*x2+4*x3=5', '4*x1+2*x2+5*x3=1')
{Check for missing argument or incorrect argument data type in call to function 'solve'.
} 
help solve
--- help for <strong>sym/solve</strong> ---

 <strong>solve</strong>  Symbolic solution of algebraic equations.
    S = <strong>solve</strong>(eqn1,eqn2,...,eqnM,var1,var2,...,varN)
    S = <strong>solve</strong>(eqn1,eqn2,...,eqnM,var1,var2,...,varN,'ReturnConditions',true)
 
    [S1,...,SN] = <strong>solve</strong>(eqn1,eqn2,...,eqnM,var1,var2,...,varN)
    [S1,...,SN,params,conds] = <strong>solve</strong>(eqn1,...,eqnM,var1,var2,...,varN,'ReturnConditions',true)
 
    The eqns are symbolic expressions, equations, or inequalities.  The
    vars are symbolic variables specifying the unknown variables.
    If the expressions are not equations or inequalities, 
    <strong>solve</strong> seeks zeros of the expressions.
    Otherwise <strong>solve</strong> seeks solutions.
    If not specified, the unknowns in the system are determined by SYMVAR,
    such that their number equals the number of equations.
    If no analytical solution is found, a numeric solution is attempted;
    in this case, a warning is printed. 
 
    Three different types of output are possible.  For one variable and one
    output, the resulting solution is returned, with multiple solutions to
    a nonlinear equation in a symbolic vector.  For several variables and
    several outputs, the results are sorted in the same order as the
    variables var1,var2,...,varN in the call to <strong>solve</strong>.  In case no variables
    are given in the call to <strong>solve</strong>, the results are sorted in lexicographic
    order and assigned to the outputs.  For several variables and a single
    output, a structure containing the solutions is returned.
 
    <strong>solve</strong>(...,'ReturnConditions', VAL) controls whether <strong>solve</strong> should in  
    addition return a vector of all newly generated parameters to express 
    infinite solution sets and about conditions on the input parameters 
    under which the solutions are correct. 
    If VAL is TRUE, parameters and conditions are assigned to the last two 
    outputs. Thus, if you provide several outputs, their number must equal 
    the number of specified variables plus two.
    If you provide a single output, a structure is returned 
    that contains two additional fields 'parameters' and 'conditions'.
    No numeric solution is attempted even if no analytical solution is found.
    If VAL is FALSE, then <strong>solve</strong> may warn about newly generated parameters or 
    replace them automatically by admissible values. It may also fall back 
    to the numerical solver.
    The default is FALSE.
 
    <strong>solve</strong>(...,'IgnoreAnalyticConstraints',VAL) controls the level of
    mathematical rigor to use on the analytical constraints of the solution
    (branch cuts, division by zero, etc). The options for VAL are TRUE or
    FALSE. Specify FALSE to use the highest level of mathematical rigor
    in finding any solutions. The default is FALSE.
 
    <strong>solve</strong>(...,'PrincipalValue',VAL) controls whether <strong>solve</strong> should return multiple
    solutions (if VAL is FALSE), or just a single solution (when VAL is TRUE).
    The default is FALSE.
 
    <strong>solve</strong>(...,'IgnoreProperties',VAL) controls if <strong>solve</strong> should take
    assumptions on variables into account. VAL can be TRUE or FALSE.
    The default is FALSE (i.e., take assumptions into account).
 
    <strong>solve</strong>(...,'Real',VAL) allows to put the solver into "real mode."
    In "real mode," only real solutions such that all intermediate values
    of the input expression are real are searched. VAL can be TRUE or FALSE.
    The default is FALSE.
 
    <strong>solve</strong>(...,'MaxDegree',n) controls the maximum degree of polynomials
    for which explicit formulas will be used during the computation.
    n must be a positive integer. The default is 3.
 
    Example 1:
       syms p x r
       solve(p*sin(x) == r) chooses 'x' as the unknown and returns
 
         ans =
                asin(r/p)
           pi - asin(r/p)
 
    Example 2:
       syms x y
       [Sx,Sy] = solve(x^2 + x*y + y == 3,x^2 - 4*x + 3 == 0) returns
 
         Sx =
          1
          3
 
         Sy =
             1
          -3/2
 
    Example 3:
       syms x y
       S = solve(x^2*y^2 - 2*x - 1 == 0,x^2 - y^2 - 1 == 0) returns
       the solutions in a structure.
 
         S =
           x: [8x1 sym]
           y: [8x1 sym]
 
    Example 4:
       syms a u v
       [Su,Sv] = solve(a*u^2 + v^2 == 0,u - v == 1) regards 'a' as a
       parameter and solves the two equations for u and v.
 
    Example 5:
       syms a u v w
       S = solve(a*u^2 + v^2,u - v == 1,a,u) regards 'v' as a
       parameter, solves the two equations, and returns S.a and S.u.
 
       When assigning the result to several outputs, the order in which
       the result is returned depends on the order in which the variables
       are given in the call to solve:
       [U,V] = solve(u + v,u - v == 1, u, v) assigns the value for u to U
       and the value for v to V. In contrast to that
       [U,V] = solve(u + v,u - v == 1, v, u) assigns the value for v to U
       and the value of u to V.
 
    Example 6:
       syms a u v
       [Sa,Su,Sv] = solve(a*u^2 + v^2,u - v == 1,a^2 - 5*a + 6) solves
       the three equations for a, u and v.
 
    Example 7:
       syms x
       S = solve(x^(5/2) == 8^(sym(10/3))) returns all three complex solutions:
 
         S =
                                                         16
          - 4*5^(1/2) - 4 + 4*2^(1/2)*(5 - 5^(1/2))^(1/2)*i
          - 4*5^(1/2) - 4 - 4*2^(1/2)*(5 - 5^(1/2))^(1/2)*i
 
    Example 8:
       syms x
       S = solve(x^(5/2) == 8^(sym(10/3)), 'PrincipalValue', true)
       selects one of these:
 
         S =
         - 4*5^(1/2) - 4 + 4*2^(1/2)*(5 - 5^(1/2))^(1/2)*i
 
    Example 9:
       syms x
       S = solve(x^(5/2) == 8^(sym(10/3)), 'IgnoreAnalyticConstraints', true)
       ignores branch cuts during internal simplifications and, in this case,
       also returns only one solution:
 
         S =
         16
 
    Example 10:
       syms x
       S = solve(sin(x) == 0) returns 0
       
       S = solve(sin(x) == 0, 'ReturnConditions', true) returns a structure expressing
       the full solution:
 
       S.x = k*pi
       S.parameters = k
       S.conditions = in(k, 'integer')
 
    Example 11:
       syms x y real 
       [S, params, conditions] = solve(x^(1/2) = y, x, 'ReturnConditions', true)
       assigns solution, parameters and conditions to the outputs. 
       In this example, no new parameters are needed to express the solution:
  
       S = 
       y^2
 
       params =
       Empty sym: 1-by-0
    
       conditions =
       0 <= y
 
    Example 12:
       syms a x y
       [x0, y0, params, conditions] = solve(x^2+y, x, y, 'ReturnConditions', true)
       generates a new parameter z to express the infinitely many solutions.
       This z can be any complex number, both solutions are valid without 
       restricting conditions:
       
       x0 =
       -(-z)^(1/2)
       (-z)^(1/2)
 
       y0 =
       z
       z
 
       params =
       z
 
       conditions =
       true
       true
 
    Example 13:
       syms t positive
       solve(t^2-1)
 
         ans =
         1
 
       solve(t^2-1, 'IgnoreProperties', true)
 
         ans =
           1
          -1
 
    Example 14:
       solve(x^3-1) returns all three complex roots:
 
         ans =
                              1
          - 1/2 + (3^(1/2)*i)/2
          - 1/2 - (3^(1/2)*i)/2
 
       solve(x^3-1, 'Real', true) only returns the real root:
 
         ans =
         1
 
    See also <a href="matlab:help dsolve">dsolve</a>, <a href="matlab:help sym/subs">subs</a>.

    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('sym/solve')">Other functions named solve</a>

solve(x1+2*x2+3*x3==4, 2*x1+3*x2+4*x3==5, 4*x1+2*x2+5*x3==1)

ans = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    x1: [1×1 sym]
    x2: [1×1 sym]
    x3: [1×1 sym]

S=solve(x1+2*x2+3*x3==4, 2*x1+3*x2+4*x3==5, 4*x1+2*x2+5*x3==1)

S = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    x1: [1×1 sym]
    x2: [1×1 sym]
    x3: [1×1 sym]

S.x1
 
ans =
 
-7/5
 
eval(S.x1)

ans =

   -1.4000

X

X =

   -1.4000
    1.8000
    0.6000

eval(S.x2)

ans =

    1.8000

eval(S.x3)

ans =

    0.6000

help dsolve
 <strong>dsolve</strong> Symbolic solution of ordinary differential equations.
    <strong>dsolve</strong> will not accept equations as strings in a future release.
    Use symbolic expressions or sym objects instead.
    For example, use syms y(t); dsolve(diff(y)==y) instead of  dsolve('Dy=y').
 
    <strong>dsolve</strong>(eqn1,eqn2, ...) accepts symbolic equations representing
    ordinary differential equations and initial conditions. 
 
    By default, the independent variable is 't'. The independent variable
    may be changed from 't' to some other symbolic variable by including
    that variable as the last input argument.
 
    The DIFF function constructs derivatives of symbolic functions (see sym/symfun).
    Initial conditions involving derivatives must use an intermediate
    variable. For example,
      syms x(t)
      Dx = diff(x);
      dsolve(diff(Dx) == -x, Dx(0) == 1)
 
    If the number of initial conditions given is less than the
    number of dependent variables, the resulting solutions will obtain
    arbitrary constants, C1, C2, etc.
    
    Three different types of output are possible.  For one equation and one
    output, the resulting solution is returned, with multiple solutions to
    a nonlinear equation in a symbolic vector.  For several equations and
    an equal number of outputs, the results are sorted in lexicographic
    order and assigned to the outputs.  For several equations and a single
    output, a structure containing the solutions is returned.
 
    If no closed-form (explicit) solution is found, then a
    warning is given and the empty sym is returned.  
  
    <strong>dsolve</strong>(...,'IgnoreAnalyticConstraints',VAL) controls the level of 
    mathematical rigor to use on the analytical constraints of the solution 
    (branch cuts, division by zero, etc). The options for VAL are TRUE or 
    FALSE. Specify FALSE to use the highest level of mathematical rigor
    in finding any solutions. The default is TRUE.
 
    <strong>dsolve</strong>(...,'MaxDegree',n) controls the maximum degree of polynomials
    for which explicit formulas will be used in SOLVE calls during the
    computation. n must be a positive integer smaller than 5. 
    The default is 2.
 
    <strong>dsolve</strong>(...,'Implicit',true) returns the solution as a vector of
    equations, relating the dependent and the independent variable. This
    option is not allowed for systems of differential equations.
 
    <strong>dsolve</strong>(...,'ExpansionPoint',a) returns the solution as a series around
    the expansion point a.
 
    <strong>dsolve</strong>(...,'Order',n) returns the solution as a series with order n-1.
 
    Examples:
 
       % Example 1
       syms x(t) a
       dsolve(diff(x) == -a*x) returns
 
         ans = C1/exp(a*t)
 
       % Example 2: changing the independent variable 
       x = dsolve(diff(x) == -a*x, x(0) == 1, 's') returns
 
         x = 1/exp(a*s)
 
       syms x(s) a
       x = dsolve(diff(x) == -a*x, x(0) == 1) returns
 
         x = 1/exp(a*s)
 
       % Example 3: solving systems of ODEs
       syms f(t) g(t)
       S = dsolve(diff(f) == f + g, diff(g) == -f + g,f(0) == 1,g(0) == 2)
       returns a structure S with fields
 
         S.f = (i + 1/2)/exp(t*(i - 1)) - exp(t*(i + 1))*(i - 1/2)
         S.g = exp(t*(i + 1))*(i/2 + 1) - (i/2 - 1)/exp(t*(i - 1))
 
       syms f(t) g(t)
       v = [f;g];
       A = [1 1; -1 1];
       S = dsolve(diff(v) == A*v, v(0) == [1;2])
       returns a structure S with fields
 
         S.f = exp(t)*cos(t) + 2*exp(t)*sin(t)
         S.g = 2*exp(t)*cos(t) - exp(t)*sin(t)
 
       % Example 3: using options
       syms y(t)
       dsolve(sqrt(diff(y))==y) returns
       
         ans = 0
       
       syms y(t)
       dsolve(sqrt(diff(y))==y, 'IgnoreAnalyticConstraints', false) warns
         Warning: The solutions are subject to the following conditions:
         (C67 + t)*(1/(C67 + t)^2)^(1/2) = -1 
       
       and returns
        
         ans = -1/(C67 + t)
 
       % Example 4: Higher order systems
       syms y(t) a
       Dy = diff(y);
       D2y = diff(y,2);
       dsolve(D2y == -a^2*y, y(0) == 1, Dy(pi/a) == 0)
       syms w(t)
       Dw = diff(w); 
       D2w = diff(w,2);
       w = dsolve(diff(D2w) == -w, w(0)==1, Dw(0)==0, D2w(0)==0)
 
    See also <a href="matlab:help cgdivexpr/solve">solve</a>, <a href="matlab:help subs">subs</a>, <a href="matlab:help sym/diff">sym/diff</a>, <a href="matlab:help odeToVectorField">odeToVectorField</a>.

    <a href="matlab:doc dsolve">Documentation for dsolve</a>

clc
A

A =

     1     2     3
     2     3     4
     4     2     5

%S=solve(x1+2*x2+3*x3==4, 2*x1+3*x2+4*x3==5, 4*x1+2*x2+5*x3==1)
%x^2+2*x+3
K=[1 2 3]

K =

     1     2     3

roots(K)

ans =

  -1.0000 + 1.4142i
  -1.0000 - 1.4142i

r=roots(K)

r =

  -1.0000 + 1.4142i
  -1.0000 - 1.4142i

p=poly(r)

p =

    1.0000    2.0000    3.0000

y=polyval(p,2)

y =

    11

x=-5:.1:3

x =

  Columns 1 through 9

   -5.0000   -4.9000   -4.8000   -4.7000   -4.6000   -4.5000   -4.4000   -4.3000   -4.2000

  Columns 10 through 18

   -4.1000   -4.0000   -3.9000   -3.8000   -3.7000   -3.6000   -3.5000   -3.4000   -3.3000

  Columns 19 through 27

   -3.2000   -3.1000   -3.0000   -2.9000   -2.8000   -2.7000   -2.6000   -2.5000   -2.4000

  Columns 28 through 36

   -2.3000   -2.2000   -2.1000   -2.0000   -1.9000   -1.8000   -1.7000   -1.6000   -1.5000

  Columns 37 through 45

   -1.4000   -1.3000   -1.2000   -1.1000   -1.0000   -0.9000   -0.8000   -0.7000   -0.6000

  Columns 46 through 54

   -0.5000   -0.4000   -0.3000   -0.2000   -0.1000         0    0.1000    0.2000    0.3000

  Columns 55 through 63

    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000

  Columns 64 through 72

    1.3000    1.4000    1.5000    1.6000    1.7000    1.8000    1.9000    2.0000    2.1000

  Columns 73 through 81

    2.2000    2.3000    2.4000    2.5000    2.6000    2.7000    2.8000    2.9000    3.0000

y=polyval(p,x)

y =

  Columns 1 through 9

   18.0000   17.2100   16.4400   15.6900   14.9600   14.2500   13.5600   12.8900   12.2400

  Columns 10 through 18

   11.6100   11.0000   10.4100    9.8400    9.2900    8.7600    8.2500    7.7600    7.2900

  Columns 19 through 27

    6.8400    6.4100    6.0000    5.6100    5.2400    4.8900    4.5600    4.2500    3.9600

  Columns 28 through 36

    3.6900    3.4400    3.2100    3.0000    2.8100    2.6400    2.4900    2.3600    2.2500

  Columns 37 through 45

    2.1600    2.0900    2.0400    2.0100    2.0000    2.0100    2.0400    2.0900    2.1600

  Columns 46 through 54

    2.2500    2.3600    2.4900    2.6400    2.8100    3.0000    3.2100    3.4400    3.6900

  Columns 55 through 63

    3.9600    4.2500    4.5600    4.8900    5.2400    5.6100    6.0000    6.4100    6.8400

  Columns 64 through 72

    7.2900    7.7600    8.2500    8.7600    9.2900    9.8400   10.4100   11.0000   11.6100

  Columns 73 through 81

   12.2400   12.8900   13.5600   14.2500   14.9600   15.6900   16.4400   17.2100   18.0000

plot(x,y)
isim=input('isim gir:')
isim gir:melih
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('input')" style="font-weight:bold">input</a>
Unrecognized function or variable 'melih'.
} 
isim gir:'melih'

isim =

    'melih'

,'s'

ans =

    's'

isim=input('isim gir:','s')
isim gir:melih

isim =

    'melih'

isstr(isim)

ans =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   1

isim*3

ans =

   327   303   324   315   312

isim

isim =

    'melih'

isim*3/3

ans =

   109   101   108   105   104

abs('e')

ans =

   101

date

ans =

    '28-Sep-2022'

clock

ans =

   1.0e+03 *

    2.0220    0.0090    0.0280    0.0130    0.0280    0.0540

dir F.m
'F.m' not found.
cd ..
dir F.m
'F.m' not found.
dir F*.*

Fah_T_newton_rapson_Et.m                        
Fah_T_yariya_bolme_Et.m                         
false_position.m                                
false_position_but.m                            
fig02_04                                        
fig02_04.m                                      
filter_design.m                                 
final_numerical_soru_10_Spline_Interpolasyon.m  
find_area_of_circle.m                           
fist_2021.m                                     
fist_soru.m                                     
forward_divided_continous_diff.m                


edit
dir F*.*

F.m     fonk.m  

edit fonk
p

p =

    1.0000    2.0000    3.0000

x

x =

  Columns 1 through 9

   -5.0000   -4.9000   -4.8000   -4.7000   -4.6000   -4.5000   -4.4000   -4.3000   -4.2000

  Columns 10 through 18

   -4.1000   -4.0000   -3.9000   -3.8000   -3.7000   -3.6000   -3.5000   -3.4000   -3.3000

  Columns 19 through 27

   -3.2000   -3.1000   -3.0000   -2.9000   -2.8000   -2.7000   -2.6000   -2.5000   -2.4000

  Columns 28 through 36

   -2.3000   -2.2000   -2.1000   -2.0000   -1.9000   -1.8000   -1.7000   -1.6000   -1.5000

  Columns 37 through 45

   -1.4000   -1.3000   -1.2000   -1.1000   -1.0000   -0.9000   -0.8000   -0.7000   -0.6000

  Columns 46 through 54

   -0.5000   -0.4000   -0.3000   -0.2000   -0.1000         0    0.1000    0.2000    0.3000

  Columns 55 through 63

    0.4000    0.5000    0.6000    0.7000    0.8000    0.9000    1.0000    1.1000    1.2000

  Columns 64 through 72

    1.3000    1.4000    1.5000    1.6000    1.7000    1.8000    1.9000    2.0000    2.1000

  Columns 73 through 81

    2.2000    2.3000    2.4000    2.5000    2.6000    2.7000    2.8000    2.9000    3.0000

y=F(x)

y =

  Columns 1 through 9

   47.0000   44.5300   42.1200   39.7700   37.4800   35.2500   33.0800   30.9700   28.9200

  Columns 10 through 18

   26.9300   25.0000   23.1300   21.3200   19.5700   17.8800   16.2500   14.6800   13.1700

  Columns 19 through 27

   11.7200   10.3300    9.0000    7.7300    6.5200    5.3700    4.2800    3.2500    2.2800

  Columns 28 through 36

    1.3700    0.5200   -0.2700   -1.0000   -1.6700   -2.2800   -2.8300   -3.3200   -3.7500

  Columns 37 through 45

   -4.1200   -4.4300   -4.6800   -4.8700   -5.0000   -5.0700   -5.0800   -5.0300   -4.9200

  Columns 46 through 54

   -4.7500   -4.5200   -4.2300   -3.8800   -3.4700   -3.0000   -2.4700   -1.8800   -1.2300

  Columns 55 through 63

   -0.5200    0.2500    1.0800    1.9700    2.9200    3.9300    5.0000    6.1300    7.3200

  Columns 64 through 72

    8.5700    9.8800   11.2500   12.6800   14.1700   15.7200   17.3300   19.0000   20.7300

  Columns 73 through 81

   22.5200   24.3700   26.2800   28.2500   30.2800   32.3700   34.5200   36.7300   39.0000

y=F(x)

y =

  Columns 1 through 9

   18.0000   17.2100   16.4400   15.6900   14.9600   14.2500   13.5600   12.8900   12.2400

  Columns 10 through 18

   11.6100   11.0000   10.4100    9.8400    9.2900    8.7600    8.2500    7.7600    7.2900

  Columns 19 through 27

    6.8400    6.4100    6.0000    5.6100    5.2400    4.8900    4.5600    4.2500    3.9600

  Columns 28 through 36

    3.6900    3.4400    3.2100    3.0000    2.8100    2.6400    2.4900    2.3600    2.2500

  Columns 37 through 45

    2.1600    2.0900    2.0400    2.0100    2.0000    2.0100    2.0400    2.0900    2.1600

  Columns 46 through 54

    2.2500    2.3600    2.4900    2.6400    2.8100    3.0000    3.2100    3.4400    3.6900

  Columns 55 through 63

    3.9600    4.2500    4.5600    4.8900    5.2400    5.6100    6.0000    6.4100    6.8400

  Columns 64 through 72

    7.2900    7.7600    8.2500    8.7600    9.2900    9.8400   10.4100   11.0000   11.6100

  Columns 73 through 81

   12.2400   12.8900   13.5600   14.2500   14.9600   15.6900   16.4400   17.2100   18.0000

dir pyt*.*
No matches for pattern 'pyt*.*'.
cd ..
dir pyt*.*
No matches for pattern 'pyt*.*'.
dir pyt.*
No matches for pattern 'pyt.*'.
edit
dir pyt.*
No matches for pattern 'pyt.*'.
dir pyt.*

pyt.m  

help pyt
 <strong>pyt</strong> hypotenuse of a right-angled triangle
        by Pythagora's theorem. Input: the sides (legs)
        of the triangle

P=pyt([1:5],[1:5])

P =

    1.4142    2.8284    4.2426    5.6569    7.0711

P=pyt(1,[1:5])

P =

    1.4142    2.2361    3.1623    4.1231    5.0990

P=[pyt(1,[1:5]);pyt(2,[1:5]);pyt(3,[1:5]);pyt(4,[1:5]);pyt(5,[1:5])]

P =

    1.4142    2.2361    3.1623    4.1231    5.0990
    2.2361    2.8284    3.6056    4.4721    5.3852
    3.1623    3.6056    4.2426    5.0000    5.8310
    4.1231    4.4721    5.0000    5.6569    6.4031
    5.0990    5.3852    5.8310    6.4031    7.0711

P=pyt([1:5],[1:5])

P =

    1.4142    2.8284    4.2426    5.6569    7.0711

clc
HI_LO
{Cannot find an exact (case-sensitive) match for 'HI_LO.m'

The closest match is C:\Users\kou\Documents\MATLAB\gunluk\HI_LO.M

To change the file extension, cd to the file's folder, type:
   movefile HI_LO.M HI_LO.m_bad; movefile HI_LO.m_bad HI_LO.m and then cd back.
} 
HI_LO
{Cannot find an exact (case-sensitive) match for 'HI_LO.m'

The closest match is C:\Users\kou\Documents\MATLAB\gunluk\HI_LO.M

To change the file extension, cd to the file's folder, type:
   movefile HI_LO.M HI_LO.m_bad; movefile HI_LO.m_bad HI_LO.m and then cd back.
} 
clc
hi_lo
You have right to 7 guesses
A guess is a number between 0 and 100
Enter your guess 67

guess =

    67

Low
You have right to 6 guesses
A guess is a number between 0 and 100
Enter your guess 87

guess =

    87

High
You have right to 5 guesses
A guess is a number between 0 and 100
Enter your guess 70

guess =

    70

Low
You have right to 4 guesses
A guess is a number between 0 and 100
Enter your guess 85

guess =

    85

High
You have right to 3 guesses
A guess is a number between 0 and 100
Enter your guess 77

guess =

    77

Low
You have right to 2 guesses
A guess is a number between 0 and 100
Enter your guess 79

guess =

    79

Low
You have right to 1 guesses
A guess is a number between 0 and 100
Enter your guess 80

guess =

    80

Low
You lost
hi_lo
{Error: <a href="matlab: opentoline('C:\Users\kou\Documents\MATLAB\gunluk\hi_lo.m',26,39)">File: hi_lo.m Line: 26 Column: 39</a>
Invalid expression. When calling a function or indexing a variable, use parentheses.
Otherwise, check for mismatched delimiters.
} 
opentoline('C:\Users\kou\Documents\MATLAB\gunluk\hi_lo.m',26,39)
opentoline('C:\Users\kou\Documents\MATLAB\gunluk\hi_lo.m',26,39)
opentoline('C:\Users\kou\Documents\MATLAB\gunluk\hi_lo.m',26,39)
hi_lo
You have right to 7 guesses
A guess is a number between 0 and 100
Enter your guess 65

guess =

    65

Low
You have right to 6 guesses
A guess is a number between 0 and 100
Enter your guess 78

guess =

    78

Low
You have right to 5 guesses
A guess is a number between 0 and 100
Enter your guess 89

guess =

    89

Low
You have right to 4 guesses
A guess is a number between 0 and 100
Enter your guess 93

guess =

    93

High
You have right to 3 guesses
A guess is a number between 0 and 100
Enter your guess 90

guess =

    90

You won
hi_lo
You have right to 7 guesses
A guess is a number between 0 and 100
Enter your guess 5

guess =

     5

Low
You have right to 6 guesses
A guess is a number between 0 and 100
Enter your guess 6

guess =

     6

Low
You have right to 5 guesses
A guess is a number between 0 and 100
Enter your guess 9

guess =

     9

Low
You have right to 4 guesses
A guess is a number between 0 and 100
Enter your guess e
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('input')" style="font-weight:bold">input</a>
Unrecognized function or variable 'e'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('hi_lo', 'C:\Users\kou\Documents\MATLAB\gunluk\hi_lo.m', 13)" style="font-weight:bold">hi_lo</a> (<a href="matlab: opentoline('C:\Users\kou\Documents\MATLAB\gunluk\hi_lo.m',13,0)">line 13</a>)
    guess = input('Enter your guess ')
} 
Enter your guess 45

guess =

    45

High
You have right to 3 guesses
A guess is a number between 0 and 100
Enter your guess 43

guess =

    43

High
You have right to 2 guesses
A guess is a number between 0 and 100
Enter your guess 2

guess =

     2

Low
You have right to 1 guesses
A guess is a number between 0 and 100
Enter your guess 6

guess =

     6

Low
The number is 12
You lost
disp('melih inal')
melih inal
clc
rem(13,2)

ans =

     1

[q,r]=rem(13,2)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('rem')" style="font-weight:bold">rem</a>
Too many output arguments.
} 
r=rem(13,2)

r =

     1

clc
who

Your variables are:

A      K      S      ans    isim   n      p      test   x1     x3     
B      P      X      guess  k      numb   r      x      x2     y      

save veri A B K P X
clear all
who
clc
load veri
who

Your variables are:

A  B  K  P  X  

A

A =

     1     2     3
     2     3     4
     4     2     5

B

B =

     4
     5
     1

K

K =

     1     2     3

P

P =

    1.4142    2.8284    4.2426    5.6569    7.0711

X

X =

   -1.4000
    1.8000
    0.6000

clc
save veritext.txt -ascii
clear all
load veritext
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('load')" style="font-weight:bold">load</a>
Unable to read file 'veritext'. No such file or directory.
} 
load veritext.txt
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('load')" style="font-weight:bold">load</a>
Unable to read file 'veritext.txt'. Input must be a MAT-file or an ASCII file containing
numeric data with same number of columns in each row.
} 
load veritext.txt -ascii
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('load')" style="font-weight:bold">load</a>
Unable to read file 'veritext.txt'. Input must be a MAT-file or an ASCII file containing
numeric data with same number of columns in each row.
} 
clc
clear
x=0:pi/60:2*pi

x =

  Columns 1 through 9

         0    0.0524    0.1047    0.1571    0.2094    0.2618    0.3142    0.3665    0.4189

  Columns 10 through 18

    0.4712    0.5236    0.5760    0.6283    0.6807    0.7330    0.7854    0.8378    0.8901

  Columns 19 through 27

    0.9425    0.9948    1.0472    1.0996    1.1519    1.2043    1.2566    1.3090    1.3614

  Columns 28 through 36

    1.4137    1.4661    1.5184    1.5708    1.6232    1.6755    1.7279    1.7802    1.8326

  Columns 37 through 45

    1.8850    1.9373    1.9897    2.0420    2.0944    2.1468    2.1991    2.2515    2.3038

  Columns 46 through 54

    2.3562    2.4086    2.4609    2.5133    2.5656    2.6180    2.6704    2.7227    2.7751

  Columns 55 through 63

    2.8274    2.8798    2.9322    2.9845    3.0369    3.0892    3.1416    3.1940    3.2463

  Columns 64 through 72

    3.2987    3.3510    3.4034    3.4558    3.5081    3.5605    3.6128    3.6652    3.7176

  Columns 73 through 81

    3.7699    3.8223    3.8746    3.9270    3.9794    4.0317    4.0841    4.1364    4.1888

  Columns 82 through 90

    4.2412    4.2935    4.3459    4.3982    4.4506    4.5029    4.5553    4.6077    4.6600

  Columns 91 through 99

    4.7124    4.7647    4.8171    4.8695    4.9218    4.9742    5.0265    5.0789    5.1313

  Columns 100 through 108

    5.1836    5.2360    5.2883    5.3407    5.3931    5.4454    5.4978    5.5501    5.6025

  Columns 109 through 117

    5.6549    5.7072    5.7596    5.8119    5.8643    5.9167    5.9690    6.0214    6.0737

  Columns 118 through 121

    6.1261    6.1785    6.2308    6.2832

y=sin(x)

y =

  Columns 1 through 9

         0    0.0523    0.1045    0.1564    0.2079    0.2588    0.3090    0.3584    0.4067

  Columns 10 through 18

    0.4540    0.5000    0.5446    0.5878    0.6293    0.6691    0.7071    0.7431    0.7771

  Columns 19 through 27

    0.8090    0.8387    0.8660    0.8910    0.9135    0.9336    0.9511    0.9659    0.9781

  Columns 28 through 36

    0.9877    0.9945    0.9986    1.0000    0.9986    0.9945    0.9877    0.9781    0.9659

  Columns 37 through 45

    0.9511    0.9336    0.9135    0.8910    0.8660    0.8387    0.8090    0.7771    0.7431

  Columns 46 through 54

    0.7071    0.6691    0.6293    0.5878    0.5446    0.5000    0.4540    0.4067    0.3584

  Columns 55 through 63

    0.3090    0.2588    0.2079    0.1564    0.1045    0.0523    0.0000   -0.0523   -0.1045

  Columns 64 through 72

   -0.1564   -0.2079   -0.2588   -0.3090   -0.3584   -0.4067   -0.4540   -0.5000   -0.5446

  Columns 73 through 81

   -0.5878   -0.6293   -0.6691   -0.7071   -0.7431   -0.7771   -0.8090   -0.8387   -0.8660

  Columns 82 through 90

   -0.8910   -0.9135   -0.9336   -0.9511   -0.9659   -0.9781   -0.9877   -0.9945   -0.9986

  Columns 91 through 99

   -1.0000   -0.9986   -0.9945   -0.9877   -0.9781   -0.9659   -0.9511   -0.9336   -0.9135

  Columns 100 through 108

   -0.8910   -0.8660   -0.8387   -0.8090   -0.7771   -0.7431   -0.7071   -0.6691   -0.6293

  Columns 109 through 117

   -0.5878   -0.5446   -0.5000   -0.4540   -0.4067   -0.3584   -0.3090   -0.2588   -0.2079

  Columns 118 through 121

   -0.1564   -0.1045   -0.0523   -0.0000

t=[conj(x') conj(y')]

t =

         0         0
    0.0524    0.0523
    0.1047    0.1045
    0.1571    0.1564
    0.2094    0.2079
    0.2618    0.2588
    0.3142    0.3090
    0.3665    0.3584
    0.4189    0.4067
    0.4712    0.4540
    0.5236    0.5000
    0.5760    0.5446
    0.6283    0.5878
    0.6807    0.6293
    0.7330    0.6691
    0.7854    0.7071
    0.8378    0.7431
    0.8901    0.7771
    0.9425    0.8090
    0.9948    0.8387
    1.0472    0.8660
    1.0996    0.8910
    1.1519    0.9135
    1.2043    0.9336
    1.2566    0.9511
    1.3090    0.9659
    1.3614    0.9781
    1.4137    0.9877
    1.4661    0.9945
    1.5184    0.9986
    1.5708    1.0000
    1.6232    0.9986
    1.6755    0.9945
    1.7279    0.9877
    1.7802    0.9781
    1.8326    0.9659
    1.8850    0.9511
    1.9373    0.9336
    1.9897    0.9135
    2.0420    0.8910
    2.0944    0.8660
    2.1468    0.8387
    2.1991    0.8090
    2.2515    0.7771
    2.3038    0.7431
    2.3562    0.7071
    2.4086    0.6691
    2.4609    0.6293
    2.5133    0.5878
    2.5656    0.5446
    2.6180    0.5000
    2.6704    0.4540
    2.7227    0.4067
    2.7751    0.3584
    2.8274    0.3090
    2.8798    0.2588
    2.9322    0.2079
    2.9845    0.1564
    3.0369    0.1045
    3.0892    0.0523
    3.1416    0.0000
    3.1940   -0.0523
    3.2463   -0.1045
    3.2987   -0.1564
    3.3510   -0.2079
    3.4034   -0.2588
    3.4558   -0.3090
    3.5081   -0.3584
    3.5605   -0.4067
    3.6128   -0.4540
    3.6652   -0.5000
    3.7176   -0.5446
    3.7699   -0.5878
    3.8223   -0.6293
    3.8746   -0.6691
    3.9270   -0.7071
    3.9794   -0.7431
    4.0317   -0.7771
    4.0841   -0.8090
    4.1364   -0.8387
    4.1888   -0.8660
    4.2412   -0.8910
    4.2935   -0.9135
    4.3459   -0.9336
    4.3982   -0.9511
    4.4506   -0.9659
    4.5029   -0.9781
    4.5553   -0.9877
    4.6077   -0.9945
    4.6600   -0.9986
    4.7124   -1.0000
    4.7647   -0.9986
    4.8171   -0.9945
    4.8695   -0.9877
    4.9218   -0.9781
    4.9742   -0.9659
    5.0265   -0.9511
    5.0789   -0.9336
    5.1313   -0.9135
    5.1836   -0.8910
    5.2360   -0.8660
    5.2883   -0.8387
    5.3407   -0.8090
    5.3931   -0.7771
    5.4454   -0.7431
    5.4978   -0.7071
    5.5501   -0.6691
    5.6025   -0.6293
    5.6549   -0.5878
    5.7072   -0.5446
    5.7596   -0.5000
    5.8119   -0.4540
    5.8643   -0.4067
    5.9167   -0.3584
    5.9690   -0.3090
    6.0214   -0.2588
    6.0737   -0.2079
    6.1261   -0.1564
    6.1785   -0.1045
    6.2308   -0.0523
    6.2832   -0.0000

t

t =

         0         0
    0.0524    0.0523
    0.1047    0.1045
    0.1571    0.1564
    0.2094    0.2079
    0.2618    0.2588
    0.3142    0.3090
    0.3665    0.3584
    0.4189    0.4067
    0.4712    0.4540
    0.5236    0.5000
    0.5760    0.5446
    0.6283    0.5878
    0.6807    0.6293
    0.7330    0.6691
    0.7854    0.7071
    0.8378    0.7431
    0.8901    0.7771
    0.9425    0.8090
    0.9948    0.8387
    1.0472    0.8660
    1.0996    0.8910
    1.1519    0.9135
    1.2043    0.9336
    1.2566    0.9511
    1.3090    0.9659
    1.3614    0.9781
    1.4137    0.9877
    1.4661    0.9945
    1.5184    0.9986
    1.5708    1.0000
    1.6232    0.9986
    1.6755    0.9945
    1.7279    0.9877
    1.7802    0.9781
    1.8326    0.9659
    1.8850    0.9511
    1.9373    0.9336
    1.9897    0.9135
    2.0420    0.8910
    2.0944    0.8660
    2.1468    0.8387
    2.1991    0.8090
    2.2515    0.7771
    2.3038    0.7431
    2.3562    0.7071
    2.4086    0.6691
    2.4609    0.6293
    2.5133    0.5878
    2.5656    0.5446
    2.6180    0.5000
    2.6704    0.4540
    2.7227    0.4067
    2.7751    0.3584
    2.8274    0.3090
    2.8798    0.2588
    2.9322    0.2079
    2.9845    0.1564
    3.0369    0.1045
    3.0892    0.0523
    3.1416    0.0000
    3.1940   -0.0523
    3.2463   -0.1045
    3.2987   -0.1564
    3.3510   -0.2079
    3.4034   -0.2588
    3.4558   -0.3090
    3.5081   -0.3584
    3.5605   -0.4067
    3.6128   -0.4540
    3.6652   -0.5000
    3.7176   -0.5446
    3.7699   -0.5878
    3.8223   -0.6293
    3.8746   -0.6691
    3.9270   -0.7071
    3.9794   -0.7431
    4.0317   -0.7771
    4.0841   -0.8090
    4.1364   -0.8387
    4.1888   -0.8660
    4.2412   -0.8910
    4.2935   -0.9135
    4.3459   -0.9336
    4.3982   -0.9511
    4.4506   -0.9659
    4.5029   -0.9781
    4.5553   -0.9877
    4.6077   -0.9945
    4.6600   -0.9986
    4.7124   -1.0000
    4.7647   -0.9986
    4.8171   -0.9945
    4.8695   -0.9877
    4.9218   -0.9781
    4.9742   -0.9659
    5.0265   -0.9511
    5.0789   -0.9336
    5.1313   -0.9135
    5.1836   -0.8910
    5.2360   -0.8660
    5.2883   -0.8387
    5.3407   -0.8090
    5.3931   -0.7771
    5.4454   -0.7431
    5.4978   -0.7071
    5.5501   -0.6691
    5.6025   -0.6293
    5.6549   -0.5878
    5.7072   -0.5446
    5.7596   -0.5000
    5.8119   -0.4540
    5.8643   -0.4067
    5.9167   -0.3584
    5.9690   -0.3090
    6.0214   -0.2588
    6.0737   -0.2079
    6.1261   -0.1564
    6.1785   -0.1045
    6.2308   -0.0523
    6.2832   -0.0000

plot(x,y),grid
cumsum(y)*pi/60

ans =

  Columns 1 through 9

         0    0.0027    0.0082    0.0164    0.0273    0.0408    0.0570    0.0758    0.0971

  Columns 10 through 18

    0.1209    0.1470    0.1756    0.2063    0.2393    0.2743    0.3113    0.3502    0.3909

  Columns 19 through 27

    0.4333    0.4772    0.5226    0.5692    0.6170    0.6659    0.7157    0.7663    0.8175

  Columns 28 through 36

    0.8692    0.9213    0.9736    1.0260    1.0782    1.1303    1.1820    1.2332    1.2838

  Columns 37 through 45

    1.3336    1.3825    1.4303    1.4770    1.5223    1.5662    1.6086    1.6493    1.6882

  Columns 46 through 54

    1.7252    1.7603    1.7932    1.8240    1.8525    1.8787    1.9025    1.9238    1.9425

  Columns 55 through 63

    1.9587    1.9723    1.9831    1.9913    1.9968    1.9995    1.9995    1.9968    1.9913

  Columns 64 through 72

    1.9831    1.9723    1.9587    1.9425    1.9238    1.9025    1.8787    1.8525    1.8240

  Columns 73 through 81

    1.7932    1.7603    1.7252    1.6882    1.6493    1.6086    1.5662    1.5223    1.4770

  Columns 82 through 90

    1.4303    1.3825    1.3336    1.2838    1.2332    1.1820    1.1303    1.0782    1.0260

  Columns 91 through 99

    0.9736    0.9213    0.8692    0.8175    0.7663    0.7157    0.6659    0.6170    0.5692

  Columns 100 through 108

    0.5226    0.4772    0.4333    0.3909    0.3502    0.3113    0.2743    0.2393    0.2063

  Columns 109 through 117

    0.1756    0.1470    0.1209    0.0971    0.0758    0.0570    0.0408    0.0273    0.0164

  Columns 118 through 121

    0.0082    0.0027    0.0000    0.0000

inty=cumsum(y)*pi/60

inty =

  Columns 1 through 9

         0    0.0027    0.0082    0.0164    0.0273    0.0408    0.0570    0.0758    0.0971

  Columns 10 through 18

    0.1209    0.1470    0.1756    0.2063    0.2393    0.2743    0.3113    0.3502    0.3909

  Columns 19 through 27

    0.4333    0.4772    0.5226    0.5692    0.6170    0.6659    0.7157    0.7663    0.8175

  Columns 28 through 36

    0.8692    0.9213    0.9736    1.0260    1.0782    1.1303    1.1820    1.2332    1.2838

  Columns 37 through 45

    1.3336    1.3825    1.4303    1.4770    1.5223    1.5662    1.6086    1.6493    1.6882

  Columns 46 through 54

    1.7252    1.7603    1.7932    1.8240    1.8525    1.8787    1.9025    1.9238    1.9425

  Columns 55 through 63

    1.9587    1.9723    1.9831    1.9913    1.9968    1.9995    1.9995    1.9968    1.9913

  Columns 64 through 72

    1.9831    1.9723    1.9587    1.9425    1.9238    1.9025    1.8787    1.8525    1.8240

  Columns 73 through 81

    1.7932    1.7603    1.7252    1.6882    1.6493    1.6086    1.5662    1.5223    1.4770

  Columns 82 through 90

    1.4303    1.3825    1.3336    1.2838    1.2332    1.1820    1.1303    1.0782    1.0260

  Columns 91 through 99

    0.9736    0.9213    0.8692    0.8175    0.7663    0.7157    0.6659    0.6170    0.5692

  Columns 100 through 108

    0.5226    0.4772    0.4333    0.3909    0.3502    0.3113    0.2743    0.2393    0.2063

  Columns 109 through 117

    0.1756    0.1470    0.1209    0.0971    0.0758    0.0570    0.0408    0.0273    0.0164

  Columns 118 through 121

    0.0082    0.0027    0.0000    0.0000

dydx=diff(y)/(pi/60)

dydx =

  Columns 1 through 9

    0.9995    0.9968    0.9913    0.9831    0.9723    0.9587    0.9425    0.9238    0.9025

  Columns 10 through 18

    0.8787    0.8525    0.8240    0.7933    0.7603    0.7253    0.6883    0.6494    0.6087

  Columns 19 through 27

    0.5663    0.5224    0.4771    0.4305    0.3826    0.3338    0.2840    0.2334    0.1822

  Columns 28 through 36

    0.1305    0.0785    0.0262   -0.0262   -0.0785   -0.1305   -0.1822   -0.2334   -0.2840

  Columns 37 through 45

   -0.3338   -0.3826   -0.4305   -0.4771   -0.5224   -0.5663   -0.6087   -0.6494   -0.6883

  Columns 46 through 54

   -0.7253   -0.7603   -0.7933   -0.8240   -0.8525   -0.8787   -0.9025   -0.9238   -0.9425

  Columns 55 through 63

   -0.9587   -0.9723   -0.9831   -0.9913   -0.9968   -0.9995   -0.9995   -0.9968   -0.9913

  Columns 64 through 72

   -0.9831   -0.9723   -0.9587   -0.9425   -0.9238   -0.9025   -0.8787   -0.8525   -0.8240

  Columns 73 through 81

   -0.7933   -0.7603   -0.7253   -0.6883   -0.6494   -0.6087   -0.5663   -0.5224   -0.4771

  Columns 82 through 90

   -0.4305   -0.3826   -0.3338   -0.2840   -0.2334   -0.1822   -0.1305   -0.0785   -0.0262

  Columns 91 through 99

    0.0262    0.0785    0.1305    0.1822    0.2334    0.2840    0.3338    0.3826    0.4305

  Columns 100 through 108

    0.4771    0.5224    0.5663    0.6087    0.6494    0.6883    0.7253    0.7603    0.7933

  Columns 109 through 117

    0.8240    0.8525    0.8787    0.9025    0.9238    0.9425    0.9587    0.9723    0.9831

  Columns 118 through 120

    0.9913    0.9968    0.9995

[size(y), size(dydx)]

ans =

     1   121     1   120

dydx=[1, dydx]

dydx =

  Columns 1 through 9

    1.0000    0.9995    0.9968    0.9913    0.9831    0.9723    0.9587    0.9425    0.9238

  Columns 10 through 18

    0.9025    0.8787    0.8525    0.8240    0.7933    0.7603    0.7253    0.6883    0.6494

  Columns 19 through 27

    0.6087    0.5663    0.5224    0.4771    0.4305    0.3826    0.3338    0.2840    0.2334

  Columns 28 through 36

    0.1822    0.1305    0.0785    0.0262   -0.0262   -0.0785   -0.1305   -0.1822   -0.2334

  Columns 37 through 45

   -0.2840   -0.3338   -0.3826   -0.4305   -0.4771   -0.5224   -0.5663   -0.6087   -0.6494

  Columns 46 through 54

   -0.6883   -0.7253   -0.7603   -0.7933   -0.8240   -0.8525   -0.8787   -0.9025   -0.9238

  Columns 55 through 63

   -0.9425   -0.9587   -0.9723   -0.9831   -0.9913   -0.9968   -0.9995   -0.9995   -0.9968

  Columns 64 through 72

   -0.9913   -0.9831   -0.9723   -0.9587   -0.9425   -0.9238   -0.9025   -0.8787   -0.8525

  Columns 73 through 81

   -0.8240   -0.7933   -0.7603   -0.7253   -0.6883   -0.6494   -0.6087   -0.5663   -0.5224

  Columns 82 through 90

   -0.4771   -0.4305   -0.3826   -0.3338   -0.2840   -0.2334   -0.1822   -0.1305   -0.0785

  Columns 91 through 99

   -0.0262    0.0262    0.0785    0.1305    0.1822    0.2334    0.2840    0.3338    0.3826

  Columns 100 through 108

    0.4305    0.4771    0.5224    0.5663    0.6087    0.6494    0.6883    0.7253    0.7603

  Columns 109 through 117

    0.7933    0.8240    0.8525    0.8787    0.9025    0.9238    0.9425    0.9587    0.9723

  Columns 118 through 121

    0.9831    0.9913    0.9968    0.9995

hold on
plot(x,inty,x,dydx)
gtext('Integral of sin(x)dx')
gtext('dy/dx')
gtext('y=sin(x)')
dir *.m

F.m                 bisection_method.m  pyt.m               
IterMeth.m          fonk.m              true_error.m        
aprox_error.m       hi_lo.m             yariyabolme.m       

!dir 0.m
 Volume in drive C has no label. 
 Volume Serial Number is 8ED1-D78A 
 
 Directory of C:\Users\kou\Documents\MATLAB\gunluk 
 
File Not Found 
!dir *.m
 Volume in drive C has no label. 
 Volume Serial Number is 8ED1-D78A 
 
 Directory of C:\Users\kou\Documents\MATLAB\gunluk 
 
24.02.2022  16:01               322 aprox_error.m 
03.03.2022  15:58             9.276 bisection_method.m 
28.09.2022  13:37               141 F.m 
03.03.2022  15:12               209 fonk.m 
28.09.2022  14:05               701 hi_lo.m 
03.03.2022  15:17               355 IterMeth.m 
28.09.2022  13:41               176 pyt.m 
24.02.2022  15:51               178 true_error.m 
03.03.2022  16:05             2.110 yariyabolme.m 
               9 File(s)         13.468 bytes 
               0 Dir(s)  23.130.484.736 bytes free 
!regedit
!calc.exe
!regedit.exe
!calc.exe
!write
help table1
--- <strong>table1</strong> not found. Showing help for <strong>table</strong> instead. ---

 <strong>table</strong> Table.
    Tables are used to collect heterogeneous data and metadata into a single
    container.  Tables are suitable for storing column-oriented or tabular data
    that are often stored as columns in a text file or in a spreadsheet.  Tables
    can accommodate variables of different types, sizes, units, etc.  They are
    often used to store experimental data, with rows representing different
    observations and columns representing different measured variables.
 
    Use the <strong>table</strong> constructor to create a table from variables in the MATLAB
    workspace.  Use the readtable function to create a table by reading data
    from a text or spreadsheet file.
 
    The <strong>table</strong> constructor can also be used to create tables without
    providing workspace variables, by providing the size and variable
    types.
 
    Tables can be subscripted using parentheses much like ordinary numeric
    arrays, but in addition to numeric and logical indices, you can use a
    table's variable and row names as indices.  You can access individual
    variables in a table much like fields in a structure, using dot
    subscripting.  You can access the contents of one or more variables using
    brace subscripting.
 
    Tables can contain different kinds of variables, including numeric,
    logical, character, string, categorical, and cell.  However, a table is
    a different class than the variables that it contains.  For example,
    even a table that contains only variables that are double arrays cannot
    be operated on as if it were itself a double array.  However, using dot
    subscripting, you can operate on a variable in a table as if it were a
    workspace variable.  Using brace subscripting, you can operate on one
    or more variables in a table as if they were in a homogeneous array.
 
    A table T has properties that store metadata such as its variable and row
    names.  Access or assign to a property using P = T.Properties.PropName or
    T.Properties.PropName = P, where PropName is one of the following:
 
    <strong>table</strong> metadata properties:
        Description          - A character vector describing the table
        DimensionNames       - A two-element cell array of character vectors containing names of
                               the dimensions of the table
        VariableNames        - A cell array containing names of the variables in the table
        VariableDescriptions - A cell array of character vectors containing descriptions of the
                               variables in the table
        VariableUnits        - A cell array of character vectors containing units for the variables
                               in table
        VariableContinuity   - An array containing a matlab.tabular.Continuity value for each table 
                               variable, specifying whether a variable represents continuous or discrete 
                               data values. You can assign 'unset', 'continuous', 'step', or 'event' to
                               elements of VariableContinuity.
        RowNames             - A cell array of nonempty, distinct character vectors containing names
                               of the rows in the table
        UserData             - A variable containing any additional information associated
                               with the table.  You can assign any value to this property.
        CustomProperties     - A container for user-defined per-table or per-variable custom 
                               metadata fields.
 
    <strong>table</strong> methods and functions:
      Construction and conversion:
        <a href="matlab:help table/table">table</a>              - Create a table from workspace variables.
        <a href="matlab:help array2table">array2table</a>        - Convert homogeneous array to table.
        <a href="matlab:help cell2table">cell2table</a>         - Convert cell array to table.
        <a href="matlab:help struct2table">struct2table</a>       - Convert structure array to table.
        <a href="matlab:help table2array">table2array</a>        - Convert table to a homogeneous array.
        <a href="matlab:help table2cell">table2cell</a>         - Convert table to cell array.
        <a href="matlab:help table2struct">table2struct</a>       - Convert table to structure array.
      Import and export:
        <a href="matlab:help readtable">readtable</a>          - Create a table by reading from a file.
        <a href="matlab:help writetable">writetable</a>         - Write a table to a file.
        <a href="matlab:help asyncio.OutputStream/write">write</a>              - Write a table to a file.
      Size and shape:
        <a href="matlab:help istable">istable</a>            - True for tables.
        <a href="matlab:help table/size">size</a>               - Size of a table.
        <a href="matlab:help table/width">width</a>              - Number of variables in a table.
        <a href="matlab:help table/height">height</a>             - Number of rows in a table.
        <a href="matlab:help table/ndims">ndims</a>              - Number of dimensions of a table.
        <a href="matlab:help table/numel">numel</a>              - Number of elements in a table.
        <a href="matlab:help table/horzcat">horzcat</a>            - Horizontal concatenation for tables.
        <a href="matlab:help table/vertcat">vertcat</a>            - Vertical concatenation for tables.
      Set membership:
        <a href="matlab:help table/intersect">intersect</a>          - Find rows common to two tables.
        <a href="matlab:help table/ismember">ismember</a>           - Find rows in one table that occur in another table.
        <a href="matlab:help table/setdiff">setdiff</a>            - Find rows that occur in one table but not in another.
        <a href="matlab:help table/setxor">setxor</a>             - Find rows that occur in one or the other of two tables, but not both.
        <a href="matlab:help table/unique">unique</a>             - Find unique rows in a table.
        <a href="matlab:help table/union">union</a>              - Find rows that occur in either of two tables.
      Data manipulation and reorganization:
        <a href="matlab:help table/summary">summary</a>            - Print summary of a table.
        <a href="matlab:help table/addvars">addvars</a>            - Insert new variables at a specified location in a table.
        <a href="matlab:help table/movevars">movevars</a>           - Move table variables to a specified location.
        <a href="matlab:help table/removevars">removevars</a>         - Delete the specified table variables.
        <a href="matlab:help table/splitvars">splitvars</a>          - Splits multi-column variables into separate variables.
        <a href="matlab:help table/mergevars">mergevars</a>          - Merges multiple variables into one multi-column variable or a nested table.
        <a href="matlab:help table/convertvars">convertvars</a>        - Converts table variables to a specified data type.
        <a href="matlab:help table/renamevars">renamevars</a>         - Rename variables in table.
        <a href="matlab:help table/sortrows">sortrows</a>           - Sort rows of a table.
        <a href="matlab:help table/stack">stack</a>              - Stack up data from multiple variables into a single variable.
        <a href="matlab:help table/unstack">unstack</a>            - Unstack data from a single variable into multiple variables.
        <a href="matlab:help table/join">join</a>               - Merge two tables by matching up rows using key variables.
        <a href="matlab:help table/innerjoin">innerjoin</a>          - Inner join between two tables.
        <a href="matlab:help table/outerjoin">outerjoin</a>          - Outer join between two tables.
        <a href="matlab:help table/rows2vars">rows2vars</a>          - Reorient rows to be variables of output table.
        <a href="matlab:help table/inner2outer">inner2outer</a>        - Invert a nested table-in-table hierarchy.
        <a href="matlab:help ismissing">ismissing</a>          - Find elements in a table that contain missing values.
        <a href="matlab:help standardizeMissing">standardizeMissing</a> - Insert missing data indicators into a table.
      Computations on tables:
        <a href="matlab:help table/varfun">varfun</a>             - Apply a function to variables in a table.
        <a href="matlab:help table/rowfun">rowfun</a>             - Apply a function to rows of a table.
 
    Examples:
 
       % Create a table from individual workspace variables.
       load patients
       patients = table(LastName,Gender,Age,Height,Weight,Smoker,Systolic,Diastolic)
 
       % Select the rows for patients who smoke, and a subset of the variables.
       smokers = patients(patients.Smoker == true, {'LastName' 'Gender' 'Systolic' 'Diastolic'})
 
       % Convert the two blood pressure variables into a single variable.
       patients.BloodPressure = [patients.Systolic patients.Diastolic];
       patients(:,{'Systolic' 'Diastolic'}) = []
 
       % Pick out two specific patients by the LastName variable.
       patients(ismember(patients.LastName,{'Smith' 'Jones'}), :)
 
       % Convert the LastName variable into row names.
       patients.Properties.RowNames = patients.LastName;
       patients.LastName = []
 
       % Use the row names to pick out two specific patients.
       patients({'Smith' 'Jones'},:)
 
       % Add metadata to the table.
       patients.Properties.Description = 'Simulated patient data';
       patients.Properties.VariableUnits =  {''  'Yrs'  'In'  'Lbs'  ''  'mm Hg'};
       patients.Properties.VariableDescriptions{6} = 'Systolic/Diastolic';
       summary(patients)
 
       % Create a new variable in the table from existing variables.
       patients.BMI = (patients.Weight * 0.453592) ./ (patients.Height * 0.0254).^2
       patients.Properties.VariableUnits{'BMI'} =  'kg/m^2';
       patients.Properties.VariableDescriptions{'BMI'} = 'Body Mass Index';
 
       % Sort the table based on the new variable.
       sortrows(patients,'BMI')
 
       % Make a scatter plot of two of the table's variables.
       plot(patients.Height,patients.Weight,'o')
 
       % Create tables from text and spreadsheet files
       patients2 = readtable('patients.dat','ReadRowNames',true)
       patients3 = readtable('patients.xls','ReadRowNames',true)
 
       % Create a table from a numeric matrix
       load tetmesh.mat
       t = array2table(X,'VariableNames',{'x' 'y' 'z'});
       plot3(t.x,t.y,t.z,'.')
 
    See also <a href="matlab:help table/table">table</a>, <a href="matlab:help categorical">categorical</a>

    <a href="matlab:doc table">Documentation for table</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('table')">Other functions named @table\table.m</a>

clc
x

x =

  Columns 1 through 9

         0    0.0524    0.1047    0.1571    0.2094    0.2618    0.3142    0.3665    0.4189

  Columns 10 through 18

    0.4712    0.5236    0.5760    0.6283    0.6807    0.7330    0.7854    0.8378    0.8901

  Columns 19 through 27

    0.9425    0.9948    1.0472    1.0996    1.1519    1.2043    1.2566    1.3090    1.3614

  Columns 28 through 36

    1.4137    1.4661    1.5184    1.5708    1.6232    1.6755    1.7279    1.7802    1.8326

  Columns 37 through 45

    1.8850    1.9373    1.9897    2.0420    2.0944    2.1468    2.1991    2.2515    2.3038

  Columns 46 through 54

    2.3562    2.4086    2.4609    2.5133    2.5656    2.6180    2.6704    2.7227    2.7751

  Columns 55 through 63

    2.8274    2.8798    2.9322    2.9845    3.0369    3.0892    3.1416    3.1940    3.2463

  Columns 64 through 72

    3.2987    3.3510    3.4034    3.4558    3.5081    3.5605    3.6128    3.6652    3.7176

  Columns 73 through 81

    3.7699    3.8223    3.8746    3.9270    3.9794    4.0317    4.0841    4.1364    4.1888

  Columns 82 through 90

    4.2412    4.2935    4.3459    4.3982    4.4506    4.5029    4.5553    4.6077    4.6600

  Columns 91 through 99

    4.7124    4.7647    4.8171    4.8695    4.9218    4.9742    5.0265    5.0789    5.1313

  Columns 100 through 108

    5.1836    5.2360    5.2883    5.3407    5.3931    5.4454    5.4978    5.5501    5.6025

  Columns 109 through 117

    5.6549    5.7072    5.7596    5.8119    5.8643    5.9167    5.9690    6.0214    6.0737

  Columns 118 through 121

    6.1261    6.1785    6.2308    6.2832

y

y =

  Columns 1 through 9

         0    0.0523    0.1045    0.1564    0.2079    0.2588    0.3090    0.3584    0.4067

  Columns 10 through 18

    0.4540    0.5000    0.5446    0.5878    0.6293    0.6691    0.7071    0.7431    0.7771

  Columns 19 through 27

    0.8090    0.8387    0.8660    0.8910    0.9135    0.9336    0.9511    0.9659    0.9781

  Columns 28 through 36

    0.9877    0.9945    0.9986    1.0000    0.9986    0.9945    0.9877    0.9781    0.9659

  Columns 37 through 45

    0.9511    0.9336    0.9135    0.8910    0.8660    0.8387    0.8090    0.7771    0.7431

  Columns 46 through 54

    0.7071    0.6691    0.6293    0.5878    0.5446    0.5000    0.4540    0.4067    0.3584

  Columns 55 through 63

    0.3090    0.2588    0.2079    0.1564    0.1045    0.0523    0.0000   -0.0523   -0.1045

  Columns 64 through 72

   -0.1564   -0.2079   -0.2588   -0.3090   -0.3584   -0.4067   -0.4540   -0.5000   -0.5446

  Columns 73 through 81

   -0.5878   -0.6293   -0.6691   -0.7071   -0.7431   -0.7771   -0.8090   -0.8387   -0.8660

  Columns 82 through 90

   -0.8910   -0.9135   -0.9336   -0.9511   -0.9659   -0.9781   -0.9877   -0.9945   -0.9986

  Columns 91 through 99

   -1.0000   -0.9986   -0.9945   -0.9877   -0.9781   -0.9659   -0.9511   -0.9336   -0.9135

  Columns 100 through 108

   -0.8910   -0.8660   -0.8387   -0.8090   -0.7771   -0.7431   -0.7071   -0.6691   -0.6293

  Columns 109 through 117

   -0.5878   -0.5446   -0.5000   -0.4540   -0.4067   -0.3584   -0.3090   -0.2588   -0.2079

  Columns 118 through 121

   -0.1564   -0.1045   -0.0523   -0.0000

p=ployfit(x,y,2)
{Unrecognized function or variable 'ployfit'.
} 
p=polyfit(x,y,2)

p =

    0.0000   -0.2964    0.9313

format long
p

p =

   0.000000000000000  -0.296441883732109   0.931299644149114

p=polyfit(x,y,3)

p =

   0.092457715883301  -0.871393442960010   1.884534192119046  -0.186899733587621

clear
y=randn(1,100)

y =

  Columns 1 through 4

  -0.433592022305684   0.342624466538650   3.578396939725760   2.769437029884877

  Columns 5 through 8

  -1.349886940156521   3.034923466331855   0.725404224946106  -0.063054873189656

  Columns 9 through 12

   0.714742903826096  -0.204966058299775  -0.124144348216312   1.489697607785465

  Columns 13 through 16

   1.409034489800479   1.417192413429614   0.671497133608080  -1.207486922685038

  Columns 17 through 20

   0.717238651328838   1.630235289164729   0.488893770311789   1.034693009917860

  Columns 21 through 24

   0.726885133383238  -0.303440924786016   0.293871467096658  -0.787282803758638

  Columns 25 through 28

   0.888395631757642  -1.147070106969150  -1.068870458168032  -0.809498694424876

  Columns 29 through 32

  -2.944284161994896   1.438380292815098   0.325190539456198  -0.754928319169703

  Columns 33 through 36

   1.370298540095228  -1.711516418853698  -0.102242446085491  -0.241447041607358

  Columns 37 through 40

   0.319206739165502   0.312858596637428  -0.864879917324456  -0.030051296196269

  Columns 41 through 44

  -0.164879019209038   0.627707287528727   1.093265669039484   1.109273297614398

  Columns 45 through 48

  -0.863652821988714   0.077359091130425  -1.214117043615409  -1.113500741486764

  Columns 49 through 52

  -0.006849328103348   1.532630308284750  -0.769665913753682   0.371378812760058

  Columns 53 through 56

  -0.225584402271252   1.117356138814467  -1.089064295052236   0.032557464164973

  Columns 57 through 60

   0.552527021112224   1.100610217880866   1.544211895503951   0.085931133175425

  Columns 61 through 64

  -1.491590310637609  -0.742301837259857  -1.061581733319986   2.350457224002042

  Columns 65 through 68

  -0.615601881466894   0.748076783703985  -0.192418510588264   0.888610425420721

  Columns 69 through 72

  -0.764849236567874  -1.402268969338759  -1.422375925091496   0.488193909859941

  Columns 73 through 76

  -0.177375156618825  -0.196053487807333   1.419310150642549   0.291584373984183

  Columns 77 through 80

   0.197811053464361   1.587699089974059  -0.804465956349547   0.696624415849607

  Columns 81 through 84

   0.835088165072682  -0.243715140377952   0.215670086403744  -1.165843931482049

  Columns 85 through 88

  -1.147952778898594   0.104874716016494   0.722254032225002   2.585491252616241

  Columns 89 through 92

  -0.666890670701386   0.187331024578940  -0.082494425370955  -1.933022917850987

  Columns 93 through 96

  -0.438966153934773  -1.794678841455123   0.840375529753905  -0.888032082329010

  Columns 97 through 100

   0.100092833139322  -0.544528929990548   0.303520794649354  -0.600326562133734

hist(y)
hist(y,'w')
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('hist', 'C:\Program Files\Polyspace\R2020b\toolbox\matlab\datafun\hist.m', 79)" style="font-weight:bold">hist</a> (<a href="matlab: opentoline('C:\Program Files\Polyspace\R2020b\toolbox\matlab\datafun\hist.m',79,0)">line 79</a>)
Input arguments must be numeric or a categorical array.
} 
help hist
 <strong>hist</strong>  Histogram.
    <strong>hist</strong> is not recommended. Use HISTOGRAM or HISTCOUNTS instead.
  
    N = <strong>hist</strong>(Y) bins the elements of Y into 10 equally spaced containers
    and returns the number of elements in each container.  If Y is a
    matrix, <strong>hist</strong> works down the columns.
 
    N = <strong>hist</strong>(C) returns the category counts for the categorical array C.
    For a categorical matrix, <strong>hist</strong> works down the columns of Y and returns
    a matrix of counts with one column for each column of Y and one row for
    each category.
 
    N = <strong>hist</strong>(Y,M), where M is a scalar, uses M bins.
 
    N = <strong>hist</strong>(Y,X), where X is a vector, returns the distribution of Y among
    bins with centers specified by X. The first bin includes data between
    -inf and the first center and the last bin includes data between the
    last bin and inf. Note: Use HISTC if it is more natural to specify bin
    edges instead.
 
    N = <strong>hist</strong>(C,CATS) returns counts for the categories specified by CATS.
    CATS is a categorical array, string array, or a cell array of character
    vectors.
 
    [N,X] = <strong>hist</strong>(...) also returns in X the position of the bin centers for
    numeric data, or the categories corresponding to N for categorical
    data.
 
    <strong>hist</strong>(...) without output arguments produces a histogram bar plot of the
    results. For numeric data, the bar edges on the first and last bins may
    extend to cover the min and max of the data unless a matrix of data is
    supplied.
 
    <strong>hist</strong>(AX,...) plots into AX instead of GCA.
 
    Class support for inputs Y: double, single, categorical
                             X: double, single, categorical, string array
 
    See also <a href="matlab:help histogram">histogram</a>, <a href="matlab:help histcounts">histcounts</a>, <a href="matlab:help mode">mode</a>, <a href="matlab:help categorical/countcats">countcats</a>, <a href="matlab:help categorical/categories">categories</a>.

    <a href="matlab:doc hist">Documentation for hist</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('hist')">Other functions named hist</a>

help mode
 <strong>mode</strong>   Mode, or most frequent value in a sample.
    M=<strong>mode</strong>(X) for vector X computes M as the sample mode, or most frequently
    occurring value in X.  For a matrix X, M is a row vector containing
    the mode of each column.  For N-D arrays, <strong>mode</strong>(X) is the mode of the
    elements along the first non-singleton dimension of X.
 
    When there are multiple values occurring equally frequently, <strong>mode</strong>
    returns the smallest of those values.  For complex inputs, this is taken
    to be the first value in a sorted list of values.
 
    [M,F]=<strong>mode</strong>(X) also returns an array F, of the same size as M.
    Each element of F is the number of occurrences of the corresponding
    element of M.
 
    [M,F,C]=<strong>mode</strong>(X) also returns a cell array C, of the same size
    as M.  Each element of C is a sorted vector of all the values having
    the same frequency as the corresponding element of M.
 
    [...]=<strong>mode</strong>(X,'all') is the mode of all elements in X.
 
    [...]=<strong>mode</strong>(X,DIM) takes the mode along the dimension DIM of X.
 
    [...]=<strong>mode</strong>(X,VECDIM) operates on the dimensions specified in the vector 
    VECDIM. For example, <strong>mode</strong>(X,[1 2]) operates on the elements contained
    in the first and second dimensions of X.
 
    This function is most useful with discrete or coarsely rounded data.
    The mode for a continuous probability distribution is defined as
    the peak of its density function.  Applying the <strong>mode</strong> function to a
    sample from that distribution is unlikely to provide a good estimate
    of the peak; it would be better to compute a histogram or density
    estimate and calculate the peak of that estimate.  Also, the <strong>mode</strong>
    function is not suitable for finding peaks in distributions having
    multiple modes.
 
    Example:
        X = [3 3 1 4; 0 0 1 1; 0 1 2 4]
        mode(X,1)
        mode(X,2)
 
       % To find the mode of a continuous variable grouped into bins:
       y = randn(1000,1);
       edges = -6:.25:6;
       bin = discretize(y,edges);
       m = mode(bin);
       edges([m, m+1])
       histogram(y,edges)
 
    Class support for input X:
       float:  double, single
       integer: uint8, int8, uint16, int16, uint32, int32, uint64, int64
 
    See also <a href="matlab:help mean">mean</a>, <a href="matlab:help median">median</a>, <a href="matlab:help histogram">histogram</a>, <a href="matlab:help histcounts">histcounts</a>.

    <a href="matlab:doc mode">Documentation for mode</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('mode')">Other functions named mode</a>

clc
hist(y,,'w')
 hist(y,,'w')
        ↑
{Error: Invalid expression. When calling a function or indexing a variable, use parentheses.
Otherwise, check for mismatched delimiters.
} 
hist(y,'w')
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('hist', 'C:\Program Files\Polyspace\R2020b\toolbox\matlab\datafun\hist.m', 79)" style="font-weight:bold">hist</a> (<a href="matlab: opentoline('C:\Program Files\Polyspace\R2020b\toolbox\matlab\datafun\hist.m',79,0)">line 79</a>)
Input arguments must be numeric or a categorical array.
} 
clc
[n,x]=hist(y)

n =

     1     3    13    16    27    20    14     1     3     2


x =

  Columns 1 through 4

  -2.618150106908864  -1.965881996736798  -1.313613886564732  -0.661345776392666

  Columns 5 through 8

  -0.009077666220600   0.643190443951465   1.295458554123531   1.947726664295596

  Columns 9 through 10

   2.599994774467663   3.252262884639728

figure,
bar(x,n)
bar(x,n,'w')
n

n =

     1     3    13    16    27    20    14     1     3     2

length(n)

ans =

    10

figure, bar(y)
stem(y)
clear
clc
clf
close all
polar(3, 2*pi)
polar(3, 2*pi, axis 'off', axis 'equal')
 polar(3, 2*pi, axis 'off', axis 'equal')
                     ↑
{Error: Invalid expression. Check for missing multiplication operator, missing or unbalanced
delimiters, or other syntax error. To construct matrices, use brackets instead of
parentheses.
} 
polar(3, 2*pi), axis 'off', axis 'equal'
clc
dir watc*.*
No matches for pattern 'watc*.*'.
dir saa*.*
No matches for pattern 'saa*.*'.
dir saat.*
No matches for pattern 'saat.*'.
dir saat*.*
No matches for pattern 'saat*.*'.

clc
watch
{Error: <a href="matlab: opentoline('C:\Users\kou\Documents\MATLAB\gunluk\watch.m',21,32)">File: watch.m Line: 21 Column: 32</a>
Invalid expression. When calling a function or indexing a variable, use parentheses.
Otherwise, check for mismatched delimiters.
} 
opentoline('C:\Users\kou\Documents\MATLAB\gunluk\watch.m',21,32)
watch

x =

     1.836970198721030e-16


y =

     3


x =

  -1.499999999999999


y =

   2.598076211353316


x =

  -2.598076211353316


y =

   1.500000000000001


x =

    -3


y =

     3.673940397442059e-16


x =

  -2.598076211353316


y =

  -1.499999999999999


x =

  -1.499999999999999


y =

  -2.598076211353316


x =

    -5.510910596163090e-16


y =

    -3


x =

   1.499999999999998


y =

  -2.598076211353317


x =

   2.598076211353315


y =

  -1.500000000000001


x =

     3


y =

    -7.347880794884119e-16


x =

   2.598076211353316


y =

   1.500000000000000


x =

   1.500000000000002


y =

   2.598076211353315

watch

x =

     1.836970198721030e-16


y =

     3


x =

  -1.499999999999999


y =

   2.598076211353316


x =

  -2.598076211353316


y =

   1.500000000000001


x =

    -3


y =

     3.673940397442059e-16


x =

  -2.598076211353316


y =

  -1.499999999999999


x =

  -1.499999999999999


y =

  -2.598076211353316


x =

    -5.510910596163090e-16


y =

    -3


x =

   1.499999999999998


y =

  -2.598076211353317


x =

   2.598076211353315


y =

  -1.500000000000001


x =

     3


y =

    -7.347880794884119e-16


x =

   2.598076211353316


y =

   1.500000000000000


x =

   1.500000000000002


y =

   2.598076211353315

watch

x =

     1.836970198721030e-16


y =

     3


x =

  -1.499999999999999


y =

   2.598076211353316


x =

  -2.598076211353316


y =

   1.500000000000001


x =

    -3


y =

     3.673940397442059e-16


x =

  -2.598076211353316


y =

  -1.499999999999999


x =

  -1.499999999999999


y =

  -2.598076211353316


x =

    -5.510910596163090e-16


y =

    -3


x =

   1.499999999999998


y =

  -2.598076211353317


x =

   2.598076211353315


y =

  -1.500000000000001


x =

     3


y =

    -7.347880794884119e-16


x =

   2.598076211353316


y =

   1.500000000000000


x =

   1.500000000000002


y =

   2.598076211353315

clc
x=[-13000:520:13000];
y=x;
[X,Y]=meshgrid(x,y);
a=1;b=2;p=1000;
z=(-X.^2/a^2+Y.^2/b^2)/(2*p);
figure
subplot(1,2,1)
mesh(z)
subplot(1,2,2)
contour(x,y,z)
help interp1
 <strong>interp1</strong> 1-D interpolation (table lookup)
 
    Vq = <strong>interp1</strong>(X,V,Xq) interpolates to find Vq, the values of the
    underlying function V=F(X) at the query points Xq. 
 
    X must be a vector. The length of X is equal to N.
    If V is a vector, V must have length N, and Vq is the same size as Xq.
    If V is an array of size [N,D1,D2,...,Dk], then the interpolation is
    performed for each D1-by-D2-by-...-Dk value in V(i,:,:,...,:). If Xq
    is a vector of length M, then Vq has size [M,D1,D2,...,Dk]. If Xq is 
    an array of size [M1,M2,...,Mj], then Vq is of size
    [M1,M2,...,Mj,D1,D2,...,Dk].
 
    Vq = <strong>interp1</strong>(V,Xq) assumes X = 1:N, where N is LENGTH(V)
    for vector V or SIZE(V,1) for array V.
 
    Interpolation is the same operation as "table lookup".  Described in
    "table lookup" terms, the "table" is [X,V] and <strong>interp1</strong> "looks-up"
    the elements of Xq in X, and, based upon their location, returns
    values Vq interpolated within the elements of V.
 
    Vq = <strong>interp1</strong>(X,V,Xq,METHOD) specifies the interpolation method.
    The available methods are:
 
      'linear'   - (default) linear interpolation
      'nearest'  - nearest neighbor interpolation
      'next'     - next neighbor interpolation
      'previous' - previous neighbor interpolation
      'spline'   - piecewise cubic spline interpolation (SPLINE)
      'pchip'    - shape-preserving piecewise cubic interpolation
      'cubic'    - cubic convolution interpolation for uniformly-spaced
                   data. This method does not extrapolate and falls back to
                   'spline' interpolation for irregularly-spaced data.
             NOTE: 'cubic' changed in R2020b to perform cubic convolution.
                   In previous releases, 'cubic' was the same as 'pchip'.
      'v5cubic'  - same as 'cubic'
      'makima'   - modified Akima cubic interpolation
 
    Vq = <strong>interp1</strong>(X,V,Xq,METHOD,'extrap') uses the interpolation algorithm
    specified by METHOD to perform extrapolation for elements of Xq outside
    the interval spanned by X.
 
    Vq = <strong>interp1</strong>(X,V,Xq,METHOD,EXTRAPVAL) replaces the values outside of
    the interval spanned by X with EXTRAPVAL.  NaN and 0 are often used for
    EXTRAPVAL.  The default extrapolation behavior with four input
    arguments is 'extrap' for 'spline', 'pchip' and 'makima', and
    EXTRAPVAL = NaN (NaN+NaN*1i for complex values) for the other methods.
 
    PP = <strong>interp1</strong>(X,V,METHOD,'pp') is not recommended. Use
    griddedInterpolant instead.
    PP = <strong>interp1</strong>(X,V,METHOD,'pp') uses the interpolation algorithm
    specified by METHOD to generate the ppform (piecewise polynomial form)
    of V. The method may be any of the above METHOD except for 'v5cubic'
    and 'makima'. PP may then be evaluated via PPVAL. PPVAL(PP,Xq) is the
    same as <strong>interp1</strong>(X,V,Xq,METHOD,'extrap').
 
    For example, generate a coarse sine curve and interpolate over a
    finer abscissa:
        X = 0:10; V = sin(X); Xq = 0:.25:10;
        Vq = <strong>interp1</strong>(X,V,Xq); plot(X,V,'o',Xq,Vq,':.')
 
    For a multi-dimensional example, we construct a table of functional
    values:
        X = [1:10]'; V = [ X.^2, X.^3, X.^4 ];
        Xq = [ 1.5, 1.75; 7.5, 7.75]; Vq = <strong>interp1</strong>(X,V,Xq);
 
    creates 2-by-2 matrices of interpolated function values, one matrix for
    each of the 3 functions. Vq will be of size 2-by-2-by-3.
 
    Class support for inputs X, V, Xq, EXTRAPVAL:
       float: double, single
 
    See also <a href="matlab:help interpft">interpft</a>, <a href="matlab:help spline">spline</a>, <a href="matlab:help pchip">pchip</a>, <a href="matlab:help interp2">interp2</a>, <a href="matlab:help interp3">interp3</a>, <a href="matlab:help interpn">interpn</a>, <a href="matlab:help ppval">ppval</a>,
             <a href="matlab:help griddedInterpolant">griddedInterpolant</a>, <a href="matlab:help scatteredInterpolant">scatteredInterpolant</a>.

    <a href="matlab:doc interp1">Documentation for interp1</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('interp1')">Other functions named interp1</a>

subplot(1,2,2)
surf(z)
help plot3
 <strong>plot3</strong>  Plot lines and points in 3-D space.
    <strong>plot3</strong>() is a three-dimensional analogue of PLOT().
  
    <strong>plot3</strong>(x,y,z), where x, y and z are three vectors of the same length,
    plots a line in 3-space through the points whose coordinates are the
    elements of x, y and z.
  
    <strong>plot3</strong>(X,Y,Z), where X, Y and Z are three matrices of the same size,
    plots several lines obtained from the columns of X, Y and Z.
  
    Various line types, plot symbols and colors may be obtained with
    <strong>plot3</strong>(X,Y,Z,s) where s is a 1, 2 or 3 character string made from
    the characters listed under the PLOT command.
  
    <strong>plot3</strong>(x1,y1,z1,s1,x2,y2,z2,s2,x3,y3,z3,s3,...) combines the plots
    defined by the (x,y,z,s) fourtuples, where the x's, y's and z's are
    vectors or matrices and the s's are strings.
  
    Example: A helix:
  
        t = 0:pi/50:10*pi;
        <strong>plot3</strong>(sin(t),cos(t),t);
  
    <strong>plot3</strong> returns a column vector of handles to lineseries objects, one
    handle per line. The X,Y,Z triples, or X,Y,Z,S quads, can be 
    followed by parameter/value pairs to specify additional 
    properties of the lines.
 
    See also <a href="matlab:help plot">plot</a>, <a href="matlab:help line">line</a>, <a href="matlab:help axis">axis</a>, <a href="matlab:help view">view</a>, <a href="matlab:help mesh">mesh</a>, <a href="matlab:help surf">surf</a>.

    <a href="matlab:doc plot3">Documentation for plot3</a>

